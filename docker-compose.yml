version: "3.3"

volumes:
    api_node_modules:
        driver: local
    ui_node_modules:
        driver: local
    MINIO_DATA_VOLUME:
        driver: local
    TUS_VOLUME:
        driver: local

services:
    db:
        image: postgres:13-alpine
        hostname: db
        tty: true
        environment:
            TERM: "xterm-256color"
            NODE_ENV: "development"
            POSTGRES_DB: "nyingarn"
            POSTGRES_USER: "root"
            POSTGRES_PASSWORD: ""
            POSTGRES_HOST_AUTH_METHOD: "trust"
            PGDATA: /postgresql/data
        # volumes:
        #     - describo_online_db_test:/postgresql
        #ports:
        #    - 5432:5432

    minio:
        image: minio/minio:latest
        hostname: s3
        restart: always
        ports:
            - 10000:9000
            - 10001:10001
        environment:
            MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
            MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"
            MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
        entrypoint:
            bash -c '/opt/bin/minio server /data --console-address ":10001"'
        volumes:
            - MINIO_DATA_VOLUME:/data
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:10001/minio/health/live"]
            interval: 30s
            timeout: 20s
            retries: 3

    # tus:
    #     image: arkisto/workspace-tusd:latest
    #     restart: always
    #     ports:
    #         - 1080:1080
    #     volumes:
    #         - TUS_VOLUME:/data
    #     user: root
    #     environment:
    #         AWS_DEFAULT_REGION: us-east-1
    #         AWS_ACCESS_KEY_ID: "${S3_ACCESS_KEY_ID}"
    #         AWS_SECRET_ACCESS_KEY: "${S3_SECRET_ACCESS_KEY}"
    #         S3_ENDPOINT_URL: "${S3_ENDPOINT_URL}"
    #         S3_BUCKET: "${S3_BUCKET}"
    #         PRE_CREATE: "http://api:8080/upload/pre-create"
    #         POST_FINISH: "http://api:8080/upload/post-finish"
    #     entrypoint:
    #         [
    #             "/usr/local/bin/tusd",
    #             "-verbose",
    #             "-hooks-enabled-events",
    #             "pre-create,post-finish",
    #             "-upload-dir",
    #             "/data",
    #             "-hooks-dir",
    #             "/srv/tusd-hooks"
    #         ]

    rabbit:
        image: rabbitmq:3-management
        hostname: rabbit
        restart: always
        ports:
            - 5672:5672
            - 15672:15672

    rabbit-worker1:
        image: node:18-bullseye
        hostname: worker1
        restart: always
        working_dir: /srv/tasks
        environment:
            TERM: "xterm-256color"
            NODE_ENV: "development"
            LOG_LEVEL: "debug"
            DB_HOST: "db"
            DB_PORT: "5432"
            DB_USER: "root"
            DB_PASSWORD: ""
            DB_DATABASE: "nyingarn"
            POST_FINISH: "http://api:8080/process/post-finish"
        volumes:
            - api_node_modules:/srv/api/node_modules:delegated
            - ./tasks:/srv/tasks:delegated
            - ./saxon-test:/srv/saxon-test:delegated
            - ./api:/srv/api:delegated
            - ./.git:/srv/tasks/.git:delegated
            - ./.git:/srv/api/.git:delegated
            - ./scripts/wait-for-it.sh:/wait-for-it.sh
            - ./configuration:/srv/configuration
        command: [
            "/wait-for-it.sh",
            "rabbit:15672",
            "--",
            "npm",
            "run",
            "develop"
        ]

    api:
        image: node:18-bullseye
        hostname: api
        tty: true
        environment:
            TERM: "xterm-256color"
            NODE_ENV: "development"
            LOG_LEVEL: "debug"
            DB_HOST: "db"
            DB_PORT: "5432"
            DB_USER: "root"
            DB_PASSWORD: ""
            DB_DATABASE: "nyingarn"
        volumes:
            - api_node_modules:/srv/api/node_modules:delegated
            - ./api:/srv/api:delegated
            - ./profiles:/srv/profiles:delegated
            - ./.git:/srv/api/.git:delegated
            - ./scripts/wait-for-it.sh:/wait-for-it.sh
            - ./configuration:/srv/configuration
        working_dir: /srv/api
        command:
            [
                "/wait-for-it.sh",
                "db:5432",
                "--",
                "npm",
                "run",
                "develop"
            ]
        ports:
            - 8080:8080

    ui:
        image: node:18-bullseye
        hostname: ui
        tty: true
        environment:
            TERM: "xterm-256color"
            NODE_ENV: "development"
        volumes:
            - ./ui:/srv/ui:delegated
            - .git:/srv/ui/.git:delegated
            - ui_node_modules:/srv/ui/node_modules:delegated
        working_dir: /srv/ui
        command: [ "npm", "run", "develop" ]

    elastic:
        image: elasticsearch:8.4.1
        hostname: elastic
        environment:
            - discovery.type=single-node
            - ES_JAVA_OPTS=-Xms750m -Xmx750m
            - xpack.security.enabled=false
            - node.name=search
        ulimits:
            memlock:
                soft: -1
                hard: -1
            nofile:
                soft: 65536
                hard: 65536
        cap_add:
            - IPC_LOCK
        ports:
            - 9200:9200

    edge:
        image: nginx:latest
        hostname: edge
        tty: true
        environment:
            TERM: "xterm-256color"
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf
            - ./scripts/wait-for-it.sh:/wait-for-it.sh
        command:
            [
                "/wait-for-it.sh",
                "api:8080",
                "-t",
                "10",
                "--",
                "nginx",
                "-g",
                "daemon off;"
            ]
        ports:
            - 9000:9000


    xml-processor:
        image: tomcat:9.0.76-jdk21-openjdk-slim
        hostname: xml
        tty: true
        environment:
            TERM: "xterm-256color"
        volumes:
            - ./xml:/srv/xml
            - ./xml/tomcat-config:/usr/local/tomcat/conf/Catalina/localhost/
        ports:
            - "8888:8080"
        restart: unless-stopped


