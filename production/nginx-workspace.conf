
server {
    listen 80;
    listen [::]:80;
    server_name workspace.nyingarn.net;

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    server_name workspace.nyingarn.net;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    ssl_certificate         /srv/letsencrypt/live/workspace.nyingarn.net/fullchain.pem;
    ssl_certificate_key     /srv/letsencrypt/live/workspace.nyingarn.net/privkey.pem;
    ssl_trusted_certificate /srv/letsencrypt/live/workspace.nyingarn.net/fullchain.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

    # modern configuration
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

    # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
    ssl_dhparam /etc/nginx/dhparams.pem;

    # HSTS (ngx_http_headers_module is required) (63072000 seconds)
    # add_header Strict-Transport-Security "max-age=63072000" always;

    # Enable OCSP stapling which allows clients to verify that our certificate
    # is not revoked without contacting the Certificate Authority by appending a
    # CA-signed promise, that it's still valid, to the TLS handshake response.
    #ssl_stapling on;
    #ssl_stapling_verify on;

    # certbot will place the files required for the HTTP challenge in the
    # webroot under the .well-known/acme-challenge directory. Therefore we must
    # make this path publicly accessible.
    location /.well-known {
            root /mnt/nginx-www/;
    }

    location / {
        root /srv/ui;	
        try_files $uri $uri/ /index.html;
    }
    location ~ ^/api/(.*) {
        resolver 127.0.0.11 valid=30s;
        set $api api;
        add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_send_timeout 120;
        proxy_read_timeout 120;
        send_timeout 120;
        proxy_pass   http://$api:8080/$1$is_args$args;
    }

    #location /socket.io/ {
    #    proxy_http_version 1.1;
    #    proxy_redirect off;
    #    proxy_set_header Upgrade $http_upgrade;
    #    proxy_set_header Connection "upgrade";
    #    proxy_set_header        Host                    $host;
    #    proxy_set_header        X-Real-IP               $remote_addr;
    #    proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
    #    proxy_pass http://api_socket_nodes/socket.io/;
    #}
}
